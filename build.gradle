buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath("org.jetbrains.kotlin:kotlin-gradle-plugin:${kotlinVersion}")
        classpath("org.jetbrains.kotlin:kotlin-allopen:${kotlinVersion}")
    }
}

plugins {
    id "com.github.hierynomus.license" version "0.15.0"
}

apply plugin: 'license'
apply plugin: 'kotlin'
apply plugin: 'kotlin-spring'
apply plugin: 'eclipse'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'

group = 'com.cardinalhealth.concourse'
version project.projectVersion
sourceCompatibility = 1.8
compileKotlin {
    kotlinOptions {
        freeCompilerArgs = ["-Xjsr305=strict"]
        jvmTarget = "1.8"
    }
}
compileTestKotlin {
    kotlinOptions {
        freeCompilerArgs = ["-Xjsr305=strict"]
        jvmTarget = "1.8"
    }
}

repositories {
    mavenCentral()
}

configurations {
    veracode
}

dependencies {
    compile('org.springframework.boot:spring-boot-starter')
    compile('org.springframework.boot:spring-boot-starter-json')

    compile("com.fasterxml.jackson.module:jackson-module-kotlin")
    compile("com.fasterxml.jackson.dataformat:jackson-dataformat-xml")


    compile("org.jetbrains.kotlin:kotlin-stdlib-jdk8")
    compile("org.jetbrains.kotlin:kotlin-reflect")

    compile("com.veracode.vosp.api.wrappers:vosp-api-wrappers-java:18.5.5.2")

    veracode("com.veracode.vosp.api.wrappers:vosp-api-wrappers-java:18.5.5.2")

    testCompile('org.springframework.boot:spring-boot-starter-test')
}

sourceSets {
    main {
        java.srcDirs = ['src/main/kotlin' ]
        resources.srcDirs = ['src/main/resources/']
    }
    docker {
        resources.srcDirs = ['src/main/docker']
    }
}

license{
    header = file("$project.projectDir/LICENSE-HEADER")
    excludes(["**/*.properties", "**/*.json"])
}

task copyDockerSource(type: Copy) {
    from "src/main/docker"
    into "$buildDir/docker"
}

task copyDockerVeracodeJar(type: Copy) {
    from configurations.veracode
    into "$buildDir/docker"
    rename ".*", "veracode.jar"
}

task copyDockerExecutable(type: Copy, dependsOn: bootJar) {
    from bootJar.archivePath
    into "$buildDir/docker"
    rename ".*", "veracode-concourse-resource.jar"
}

copyDockerVeracodeJar.mustRunAfter copyDockerSource
copyDockerExecutable.mustRunAfter copyDockerSource
task doDockerPreWork{
    dependsOn(['copyDockerSource', 'copyDockerVeracodeJar', 'copyDockerExecutable'])
}